#'clojure-training-2024.lesson01/grocery-entry
clj꞉clojure-training-2024.lesson01꞉> 
; Evaluating file: lesson01.clj
{:liquid "Milk", :colour "White", :price 299}
clj꞉clojure-training-2024.lesson01꞉> 
; Evaluating file: lesson01.clj
{:liquid "Milk", :colour "White", :price 299}
clj꞉clojure-training-2024.lesson01꞉> 
; Jacking in...
; Connecting using "undefined" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
;
; Aborting jack-in. No project type selected.
{:liquid "Milk", :colour "White"}
clj꞉clojure-training-2024.lesson01꞉> 
{:liquid "Milk", :colour "White", :price 300}
clj꞉clojure-training-2024.lesson01꞉> 
{:liquid "Milk", :colour "White", :price 349}
clj꞉clojure-training-2024.lesson01꞉> 
{:liquid "Milk", :colour "White", :price 361}
clj꞉clojure-training-2024.lesson01꞉> 
#'clojure-training-2024.lesson01/put-on-special
clj꞉clojure-training-2024.lesson01꞉> 
{:colour "White", :price 1196/5, :on-special? true}
clj꞉clojure-training-2024.lesson01꞉> 
{:price 1196/5, :colour "White", :on-special? true}
clj꞉clojure-training-2024.lesson01꞉> 
{:colour "White", :price 1196/5, :on-special? true}
clj꞉clojure-training-2024.lesson01꞉> 
{:colour "White", :price 239.20000000000002, :on-special? true}
clj꞉clojure-training-2024.lesson01꞉> 
{:colour "White", :price 224.25, :on-special? true}
clj꞉clojure-training-2024.lesson01꞉> 
#'clojure-training-2024.lesson01/put-on-special
clj꞉clojure-training-2024.lesson01꞉> 
{:colour "White", :price 224.25, :on-special? true}
clj꞉clojure-training-2024.lesson01꞉> 
; Evaluating file: lesson01.clj
#'clojure-training-2024.lesson01/square
clj꞉clojure-training-2024.lesson01꞉> 
(1 4 9 16 25)
clj꞉clojure-training-2024.lesson01꞉> 
(1 3 5)
clj꞉clojure-training-2024.lesson01꞉> 
(2 4)
clj꞉clojure-training-2024.lesson01꞉> 
; Evaluating file: lesson01.clj
#'clojure-training-2024.lesson01/g
clj꞉clojure-training-2024.lesson01꞉> 
; Evaluating file: lesson01.clj
#'clojure-training-2024.lesson01/h
clj꞉clojure-training-2024.lesson01꞉> 
(2 4 6)
clj꞉clojure-training-2024.lesson01꞉> 
(3 5 7)
clj꞉clojure-training-2024.lesson01꞉> 
; Evaluating file: lesson01.clj
(3 5 7)
clj꞉clojure-training-2024.lesson01꞉> 
(3 5 7)
clj꞉clojure-training-2024.lesson01꞉> 
; Syntax error compiling at (d:\Visual Studio Code\clojure-training-2024\src\clojure_training_2024\lesson01.clj:190:1).
; Unable to resolve symbol: my-even in this context
clj꞉clojure-training-2024.lesson01꞉> 
; Evaluating file: lesson01.clj
(2 4)
clj꞉clojure-training-2024.lesson01꞉> 
(2 4)
clj꞉clojure-training-2024.lesson01꞉> 
(2 4)
clj꞉clojure-training-2024.lesson01꞉> 
(2 4)
clj꞉clojure-training-2024.lesson01꞉> 
(2 4)
clj꞉clojure-training-2024.lesson01꞉> 
(2 4)
clj꞉clojure-training-2024.lesson01꞉> 
-------------------------
clojure.core/filter
([pred] [pred coll])
  Returns a lazy sequence of the items in coll for which
  (pred item) returns logical true. pred must be free of side-effects.
  Returns a transducer when no collection is provided.
nil
clj꞉clojure-training-2024.lesson01꞉> 
10
clj꞉clojure-training-2024.lesson01꞉> 
#'clojure-training-2024.lesson01/add-3
clj꞉clojure-training-2024.lesson01꞉> 
13
clj꞉clojure-training-2024.lesson01꞉> 
; Syntax error compiling at (d:\Visual Studio Code\clojure-training-2024\src\clojure_training_2024\lesson01.clj:217:1).
; Unable to resolve symbol: make-n-adder in this context
clj꞉clojure-training-2024.lesson01꞉> 
; Evaluating file: lesson01.clj
-------------------------
clojure.core/filter
([pred] [pred coll])
  Returns a lazy sequence of the items in coll for which
  (pred item) returns logical true. pred must be free of side-effects.
  Returns a transducer when no collection is provided.
#function[clojure-training-2024.lesson01/make-n-adder/fn--8764]
clj꞉clojure-training-2024.lesson01꞉> 
#function[clojure-training-2024.lesson01/make-n-adder/fn--8764]
clj꞉clojure-training-2024.lesson01꞉> 
#function[clojure-training-2024.lesson01/make-n-adder/fn--8764]
clj꞉clojure-training-2024.lesson01꞉> 
69
clj꞉clojure-training-2024.lesson01꞉> 
1
clj꞉clojure-training-2024.lesson01꞉> 
(2 3)
clj꞉clojure-training-2024.lesson01꞉> 
3
clj꞉clojure-training-2024.lesson01꞉> 
(1 2 3)
clj꞉clojure-training-2024.lesson01꞉> 
1
clj꞉clojure-training-2024.lesson01꞉> 
[1 2 3]
clj꞉clojure-training-2024.lesson01꞉> 
[1 2 3]
clj꞉clojure-training-2024.lesson01꞉> 
[1 :banner "split"]
clj꞉clojure-training-2024.lesson01꞉> 
#{1 3 2}
clj꞉clojure-training-2024.lesson01꞉> 
; Syntax error reading source at (REPL:86:11).
; Duplicate key: 3
clj꞉clojure-training-2024.lesson01꞉> 
true
clj꞉clojure-training-2024.lesson01꞉> 
#{1 4 3 2}
clj꞉clojure-training-2024.lesson01꞉> 
#{0
  65
  70
  62
  74
  7
  59
  86
  20
  72
  58
  60
  27
  1
  69
  24
  55
  85
  39
  88
  46
  4
  77
  95
  54
  92
  15
  48
  50
  75
  21
  31
  32
  40
  91
  56
  33
  13
  22
  90
  36
  41
  89
  43
  61
  29
  44
  93
  6
  28
  ...}
clj꞉clojure-training-2024.lesson01꞉> 
[1 2 3 99]
clj꞉clojure-training-2024.lesson01꞉> 
{:foo 99, :bar 99}
clj꞉clojure-training-2024.lesson01꞉> 
{:foo 99, :vector 99}
clj꞉clojure-training-2024.lesson01꞉> 
(0 1 2 3)
clj꞉clojure-training-2024.lesson01꞉> 
nil
clj꞉clojure-training-2024.lesson01꞉> 
()
clj꞉clojure-training-2024.lesson01꞉> 
nil
clj꞉clojure-training-2024.lesson01꞉> 
(1 2 3)
clj꞉clojure-training-2024.lesson01꞉> 
nil
clj꞉clojure-training-2024.lesson01꞉> 
"true response"
clj꞉clojure-training-2024.lesson01꞉> 
"false response"
clj꞉clojure-training-2024.lesson01꞉> 
123
clj꞉clojure-training-2024.lesson01꞉> 
foo
clj꞉clojure-training-2024.lesson01꞉> 
[1 2 3]
nil
clj꞉clojure-training-2024.lesson01꞉> 
[1 2 3]
nil
clj꞉clojure-training-2024.lesson01꞉> 
[1 2 3]nil
clj꞉clojure-training-2024.lesson01꞉> 
[1 2 3]
nil
clj꞉clojure-training-2024.lesson01꞉> 
[1 2 3]
clj꞉clojure-training-2024.lesson01꞉> 
[1 2 3]
(2 3)
(3)
nil
clj꞉clojure-training-2024.lesson01꞉> 
; Execution error (NullPointerException) at clojure-training-2024.lesson01/eval8837 (form-init16067611811112160517.clj:273).
; Cannot invoke "Object.getClass()" because "x" is null
clj꞉clojure-training-2024.lesson01꞉> 
3
clj꞉clojure-training-2024.lesson01꞉> 
3
clj꞉clojure-training-2024.lesson01꞉> 
3
clj꞉clojure-training-2024.lesson01꞉> 
6
clj꞉clojure-training-2024.lesson01꞉> 
6
clj꞉clojure-training-2024.lesson01꞉> 
10
clj꞉clojure-training-2024.lesson01꞉> 
6
clj꞉clojure-training-2024.lesson01꞉> 
; Syntax error compiling at (d:\Visual Studio Code\clojure-training-2024\src\clojure_training_2024\lesson01.clj:273:40).
; Unable to resolve symbol: x in this context
clj꞉clojure-training-2024.lesson01꞉> 
; Syntax error compiling at (d:\Visual Studio Code\clojure-training-2024\src\clojure_training_2024\lesson01.clj:273:40).
; Unable to resolve symbol: nums-to-addx in this context
clj꞉clojure-training-2024.lesson01꞉> 
6
clj꞉clojure-training-2024.lesson01꞉> 
(total)