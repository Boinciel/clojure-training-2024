
* Lesson 10: re-frame

* Preparatory Material for Lesson 10

 - The [[https://day8.github.io/re-frame/re-frame/][re-frame documentation]] is some of the best I've seen.  Please read
   ALL of it; you'll learn not only about re-frame itself, but also about
   a beautiful model of UI programming.  re-frame was written by Mike Thompson,
   a frequent attendee at the Sydney Clojure meetups, I've had the pleasure of
   seeing some of his talks and chatting to him, he is a /very/ smart guy.

   Mike's documentation and explanation is better than anything I could come up
   with for the scope of this class, so we'll lean on it pretty heavily.

 - Clone re-frame (at https://github.com/day8/re-frame/) and make sure to run
   the simple example provided in https://github.com/day8/re-frame/tree/master/examples/simple


* Lesson plan

** Re-frame


The six dominoes are:

 - Event dispatch
 - Event handling
 - Effect handling
 - Query
 - View
 - DOM

The [[https://day8.github.io/re-frame/event-handling-infographic/][event infographic]] is key.
The [[https://day8.github.io/re-frame/subscriptions/][subscription infographic]] is also informative.


 #+begin_quote
 Effects And Coeffects
 =======================
When striving for pure event handlers there are two considerations:

Effects - what your event handler does to the world (aka side-effects)
Coeffects - the data your event handler requires from the world in order to do its computation (aka side-causes)
 #+end_quote

 #+begin_quote
 In re-frame, the forwards sweep progressively creates coeffects
 (inputs to the event handler), while the backwards sweep processes
 the effects (outputs from the event handler).
 #+end_quote

 #+begin_quote
 Event handlers compute how the world should change in response to an
 event and, to do that, they need to first know the current state of
 the world.

 coeffects is the current state of the world, as data, as presented to an event handler.
 #+end_quote